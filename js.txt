// Initialize canvas
const canvas = document.getElementById('diagramCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

function toggleConnectorMode() {
    isAddingConnector = !isAddingConnector;
}

// Data structure for stages
let stages = [];

// Data structure for connectors
let connectors = [];

// Currently selected stage (if any)
let selectedStage = null;

// Flag to indicate dragging
let isDragging = false;

// Flag to indicate adding connector mode
let isAddingConnector = false;

// Start and end stages for connector creation
let startStage = null;
let endStage = null;

// Function to draw a stage (circle)
function drawStage(stage) {
    ctx.beginPath();
    ctx.arc(stage.x, stage.y, stage.radius, 0, Math.PI * 2);
    if (stage === selectedStage) {
        ctx.fillStyle = '#FFA500'; // Highlight selected stage
    } else {
        ctx.fillStyle = '#009688';
    }
    ctx.fill();
    ctx.strokeStyle = '#004D40';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.closePath();

    // Draw stage label
    ctx.fillStyle = '#000';
    ctx.font = '14px Arial';
    ctx.fillText(stage.label, stage.x - stage.radius / 2, stage.y - stage.radius - 5);

    // Draw possible stages
    stage.possibleStages.forEach(possibleStage => {
        drawConnector(stage, possibleStage);
    });
}

// Function to draw a connector (line) between two stages
function drawConnector(startStage, endStage) {
    const dx = endStage.x - startStage.x;
    const dy = endStage.y - startStage.y;
    const angle = Math.atan2(dy, dx);

    // Arrowhead
    ctx.beginPath();
    ctx.moveTo(endStage.x, endStage.y);
    ctx.lineTo(endStage.x - 10 * Math.cos(angle - Math.PI / 6), endStage.y - 10 * Math.sin(angle - Math.PI / 6));
    ctx.lineTo(endStage.x - 10 * Math.cos(angle + Math.PI / 6), endStage.y - 10 * Math.sin(angle + Math.PI / 6));
    ctx.closePath();
    ctx.fillStyle = '#607D8B';
    ctx.fill();

    // Connector line
    ctx.beginPath();
    ctx.moveTo(startStage.x, startStage.y);
    ctx.lineTo(endStage.x, endStage.y);
    ctx.strokeStyle = '#607D8B';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.closePath();

    // Connector label
    ctx.fillStyle = '#000';
    ctx.font = '12px Arial';
    ctx.fillText('Label', (startStage.x + endStage.x) / 2, (startStage.y + endStage.y) / 2);
}

// Function to draw everything on canvas
function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    stages.forEach(stage => {
        drawStage(stage);
    });
}

// Function to handle mouse down event on a stage
function onMouseDown(event) {
    const mouseX = event.clientX;
    const mouseY = event.clientY;

    if (isAddingConnector) {
        // Check if the mouse is on a stage
        startStage = stages.find(stage => {
            const dx = stage.x - mouseX;
            const dy = stage.y - mouseY;
            return Math.sqrt(dx * dx + dy * dy) <= stage.radius;
        });

        isDragging = true;
    } else {
        // Check if the mouse is on a stage
        selectedStage = stages.find(stage => {
            const dx = stage.x - mouseX;
            const dy = stage.y - mouseY;
            return Math.sqrt(dx * dx + dy * dy) <= stage.radius;
        });

        if (!selectedStage) {
            // If clicked outside existing stage, create a new stage
            stages.push({ x: mouseX, y: mouseY, radius: 20, label: 'Stage', possibleStages: [] });
        } else {
            // If a stage is selected, start dragging it
            isDragging = true;
        }
    }

    draw();
}

// Function to handle mouse move event
function onMouseMove(event) {
    if (isDragging) {
        if (isAddingConnector) {
            draw();
            // Draw temporary connector
            if (startStage) {
                ctx.beginPath();
                ctx.moveTo(startStage.x, startStage.y);
                ctx.lineTo(event.clientX, event.clientY);
                ctx.strokeStyle = '#607D8B';
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.closePath();
            }
        } else {
            // Update the selected stage position if dragging
            if (selectedStage) {
                selectedStage.x = event.clientX;
                selectedStage.y = event.clientY;
            }
            draw();
        }
    }
}

// Function to handle mouse up event
function onMouseUp(event) {
    isDragging = false;

    if (isAddingConnector) {
        // Check if the mouse is on a stage
        endStage = stages.find(stage => {
            const dx = stage.x - event.clientX;
            const dy = stage.y - event.clientY;
            return Math.sqrt(dx * dx + dy * dy) <= stage.radius;
        });

        if (startStage && endStage && startStage !== endStage) {
            // If both start and end stages are defined and different, create a connector
            if (!startStage.possibleStages.includes(endStage)) {
                startStage.possibleStages.push(endStage);
            }
            draw();
        }

        startStage = null;
        endStage = null;
    }
}

// Add event listeners
canvas.addEventListener('mousedown', onMouseDown);
canvas.addEventListener('mousemove', onMouseMove);
canvas.addEventListener('mouseup', onMouseUp);
